import stdlib.

module C (F : ★ ➔ ★){fm : CastMap · F}.

foldU ◂ Top ➔ Top = λ alg . β{|λ d . d alg|} .
inU ◂ Top = β{|λ d . λ alg . alg (foldU alg) d|}.
inAlgU ◂ Top = β{|λ _ . λ d . inU d|}.
outU ◂ Top = β{|λ x. x (λ _. λ xs. xs)|}.

Alg ◂ ★ ➔ (★ ➔ ★) ➔ ★ =
  λ C : ★ . λ X : ★ ➔ ★ .
    ι alg : Top . ∀ R : ★ .
      Cast · R · C ➾
      View · (R ➔ F · R) outU ➾
      View · (R ➔ X · R) (foldU alg) ➔
      F · R ➔
      X · R.

rF' ◂ ★ ➔ ★ = λ C : ★ . ∀ X : ★ ➔ ★ . CastMap · X ➾ Alg · C · X ➔ X · C .

rF ◂ ★ ➔ ★ = λ C : ★ . ι x : rF' · C . { x inAlgU ≃ x } .

C ◂ ★ = Rec · rF.

rFunctor ◂ CastMap · rF =
 Λ X . Λ Y . Λ c .
  [λ x . [Λ A . Λ fA . λ a .
           cast -(fA -c)
             (x.1 · A -fA
               [β{|a|} ,
                Λ R . Λ reveal . Λ o. λ e . λ d .
                  a.2 · R -(castTrans -reveal -c) -o e d ]),
          x.2],
    β] .

rFold ◂ rF · C ➔ C =
  recFold · rF -rFunctor .

rUnfold ◂ C ➔ rF · C =
  recUnfold · rF -rFunctor .

fold ◂ ∀ X : ★ ➔ ★ . CastMap · X ➾ Alg · C · X ➔ C ➔ X · C =
  Λ X . Λ fX . λ alg . λ d . (rUnfold d).1 · X -fX alg .

cRec ◂ C ➔ rF' · C =
  λ t . (rUnfold t).1 .


out ◂ C ➔ F · C =
  λ x .
    (rUnfold x).1 · F -fm
      [β{|λ _ . λ d . d|} , Λ R . Λ reveal . Λ o. λ eval . λ d . d] .

in ◂ F · C ➔ C =
  λ d .
    rFold
      [Λ X . Λ fX . λ alg . alg.2 · C -(castRefl · C ) -[ out , β{|out|} ]
                       [fold · X -fX alg , β{|fold alg|} ] d,
       β{|λ alg . (alg (fold alg) d)|}].

inAlg ◂ Alg · C · (λ _ : ★ . C) =
   [ β{|λ eval . λ d . in d|} ,
     Λ R . Λ reveal . Λ o . λ eval . λ d . in (cast -(fm -reveal) d)].
